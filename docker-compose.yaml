services:
  redis:
    container_name: redis
    image: redis:latest
    restart: always
    volumes:
      - "./data/sentry/redis/data:/data"
  
  postgres:
    container_name: postgres
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    volumes:
      - "./data/sentry/postgres:/var/lib/postgresql/data"
  
  mysql:
    container_name: mysql    
    image: mysql:8.0
    restart: always
    ports:
      - "3306:3306"
    env_file:
      - .env
    volumes:
      - "./mysql/data:/var/lib/mysql"

  sentry-base:
    container_name: sentry-base
    image: sentry:latest
    restart: always
    ports:
      - "9000:9000"
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    volumes:
      - "./data/sentry/sentry:/var/lib/sentry/files"

  sentry-cron:
    container_name: sentry-cron
    image: sentry:latest
    restart: always
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    command: "sentry run cron"
    volumes:
      - "./data/sentry/sentry:/var/lib/sentry/files"

  sentry-worker:
    container_name: sentry-worker
    image: sentry:latest
    restart: always
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    command: "sentry run worker"
    volumes:
      - "./data/sentry/sentry:/var/lib/sentry/files"

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3030:3000"
    depends_on:
      - sentry-base
    env_file:
      - .env
    volumes:
      - "idontknowGrafana:/var/lib/grafana"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    depends_on:
      - cadvisor
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - idontknowPrometheus:/prometheus
    command: 
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-lifecycle"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    privileged: true
    ports:
      - "8080:8080"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro

  backend-1:
    container_name: backend-1
    build: ./backend
    depends_on:
      - sentry-base
    command: ["python", "main.py"]

  backend-2:
    container_name: backend-2
    build: ./backend
    depends_on:
      - sentry-base
    command: ["python", "main.py"]

  backend-3:
    container_name: backend-3
    build: ./backend
    depends_on:
      - sentry-base
    command: ["python", "main.py"]

  frontend:
    container_name: frontend
    build: ./frontend
    volumes:
      - idontknowFrontendVolume:/var/www/indontknowname
    command: ["npm", "run", "preview"]

  nginx:
    container_name: nginx
    restart: always
    build: ./nginx
    depends_on:
      - sentry-base
    volumes:
      - idontknowFrontendVolume:/var/www/indontknowname
    ports:
      - "80:80"
      - "443:443"

networks:
  default:
    external:
      name: idontknowname


volumes: 
  idontknowFrontendVolume:
  idontknowPrometheus:
  idontknowGrafana: